{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[{"parent":"root","children":[{"parent":"4d6756af21065c64","children":[],"id":"3507a05071b029d7","title":"&nbsp;如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果 *       子类重写的方法中有异常，必须使用try-catch-finally方式处理"},{"parent":"4d6756af21065c64","children":[],"id":"086b8a09a92c5684","title":"执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws *       的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理"}],"id":"4d6756af21065c64","title":"选择使用try-catch-finally 还是使用throws?"},{"parent":"root","children":[{"parent":"032d7dc61570ee06","children":[],"id":"d3e042b2c509c059","title":"首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运行环境)"},{"parent":"032d7dc61570ee06","children":[],"id":"250b32a7f44a014d","title":"throw new Exception(\"您输入的数据非法！\")"}],"id":"032d7dc61570ee06","title":"手动抛出异常"},{"parent":"root","image":{"w":551,"h":268,"url":"http://cdn.processon.com/60fbdcdc637689719d24b958?e=1627122413&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:LZ_bJj9H3eCdRshq5mzHci3deDE="},"children":[],"id":"cf08fbade7189d4d","title":""}],"children":[{"parent":"root","children":[{"parent":"86ce824fadd25874","children":[],"id":"bcd2edde4e10527f","title":"Error: Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理"},{"parent":"86ce824fadd25874","children":[{"parent":"ffde5224c7e95498","children":[],"id":"ede9d7437f8d7eb1","title":"空指针访问<br>"},{"parent":"ffde5224c7e95498","children":[],"id":"0e76412ae5b26019","title":"试图读取不存在的文件"},{"parent":"ffde5224c7e95498","children":[],"id":"9475afcbde01b7b3","title":"网络连接中断"},{"parent":"ffde5224c7e95498","children":[],"id":"4b4a6511bcf01a84","title":"数组角标越界"}],"id":"ffde5224c7e95498","title":"Exception :其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理,例如"},{"parent":"86ce824fadd25874","children":[{"parent":"a36b0ada5cb979ed","children":[{"parent":"529dc295aa25fb86","children":[],"id":"1e3e133b2f4b69fb","title":"是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。<br>"},{"parent":"529dc295aa25fb86","children":[],"id":"59bd37d8147ed493","title":"对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响"}],"id":"529dc295aa25fb86","title":"编译时异常"},{"parent":"a36b0ada5cb979ed","children":[{"parent":"5a4716869001b674","children":[],"id":"fa2ed92f76620181","title":"是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译时异常<br>"},{"parent":"5a4716869001b674","children":[],"id":"4c417d82c9dfdfa7","title":"对于这类异常，如果程序不处理，可能会带来意想不到的结果"}],"id":"5a4716869001b674","title":"运行时异常"}],"id":"a36b0ada5cb979ed","title":"异常的分类"}],"id":"86ce824fadd25874","title":"异常概念"},{"parent":"root","children":[{"parent":"f24f22a8d375abad","children":[],"id":"a6e9cdf6c7dff968","title":".inally是可选的。<br>"},{"parent":"f24f22a8d375abad","children":[],"id":"d719f15be3a5804b","title":"catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错"},{"parent":"f24f22a8d375abad","children":[],"id":"61607514702c4be3","title":"常用的异常对象处理的方式： ① String getMessage() ② printStackTrace()"},{"parent":"f24f22a8d375abad","children":[],"id":"b0da77d4f7043881","title":"使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。 *     相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现"},{"parent":"f24f22a8d375abad","children":[],"id":"05c2bf4c910cb4fd","title":"由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。 *      针对于编译时异常，我们说一定要考虑异常的处理"},{"parent":"f24f22a8d375abad","image":{"w":552,"h":302,"url":"http://cdn.processon.com/60fbd9070791294ae09f5490?e=1627121432&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:uyEKRgNjKQQhJxMu1TzVjDX3rlg="},"children":[],"id":"b4e113ea1f90f5a5","title":""}],"id":"f24f22a8d375abad","title":"异常处理机制一：try-catch-finally"},{"parent":"root","children":[{"parent":"9b2453f79c3fce26","children":[],"id":"f6360652a75cf223","title":"\"throws + 异常类型\"写在方法的声明处。指明此方法执行时，可能会抛出的异常类型"},{"parent":"9b2453f79c3fce26","children":[],"id":"190da773d1694239","title":"一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！"},{"parent":"9b2453f79c3fce26","children":[],"id":"02de77f652750755","title":"try-catch-finally:真正的将异常给处理掉了。 *        throws的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉"},{"parent":"9b2453f79c3fce26","children":[],"id":"1e859b459450f6b4","title":"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型"}],"id":"9b2453f79c3fce26","title":"异常处理机制二：throws"}],"root":true,"theme":"theme3","id":"root","title":"异常","structure":"mind_free"}},"meta":{"exportTime":"2021-07-24 17:27:19","member":"60ef8a5cf346fb06e6a9d554","diagramInfo":{"creator":"60ef8a5cf346fb06e6a9d554","created":"2021-07-24 16:32:28","modified":"2021-07-24 17:27:08","title":"异常","category":"outline"},"id":"60fbd01c0e3e7423a3277348","type":"ProcessOn Schema File","version":"1.0"}}