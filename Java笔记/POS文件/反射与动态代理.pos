{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"children":[{"parent":"root","children":[{"parent":"19200830a18ccfb1","image":{"w":823,"h":126,"url":"http://cdn.processon.com/60fc29cf5653bb3ddc111dce?e=1627142111&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:U1wT8ae0iqpctLW64UmHAHG0obM="},"children":[],"id":"b1b03ea6d8a1d7e7","title":""},{"parent":"19200830a18ccfb1","children":[{"parent":"945832d8596bd0f2","children":[],"id":"dbfddd9bf251cc04","title":"Class clazz = Person.class"},{"parent":"945832d8596bd0f2","children":[],"id":"b4f27205a500299c","title":"Constructor cons = clazz.getConstructor(String.class,int.class)"},{"parent":"945832d8596bd0f2","children":[],"id":"0c71d98ea34cbcc0","title":"Object obj = cons.newInstance(\"Jon\",18);"}],"id":"945832d8596bd0f2","title":"通过反射，创建Person类的对象&nbsp;&nbsp;"},{"parent":"19200830a18ccfb1","children":[{"parent":"1d91a8605301da26","children":[],"id":"c7dacabbe6cefe26","title":"Field age = clazz.getDeclaredField(\"age\");"},{"parent":"1d91a8605301da26","children":[],"id":"8d4bc4fa0d2db130","title":"Method show = clazz.getDeclaredMethod(\"show\");&nbsp; show.invoke(p);<br>"}],"id":"1d91a8605301da26","title":"通过反射，调用对象指定的属性和方法"},{"parent":"19200830a18ccfb1","children":[{"parent":"791680ca531efc91","children":[],"id":"73d2e0091a772bf9","title":"Constructor cons2 = clazz.getDeclaredConstructor(String.class);<br>"},{"parent":"791680ca531efc91","children":[],"id":"fcb58a6a769157e3","title":"cons2.setAccessible(true)"}],"id":"791680ca531efc91","title":"反射可以调用私有构造器，属性和方法，Declared 和setAccessible()"}],"id":"19200830a18ccfb1","title":"反射的实现步骤"},{"parent":"root","children":[],"id":"de818d83866e6167","title":"Class类的理解"},{"parent":"root","children":[{"parent":"b65a322109ae83ef","children":[],"id":"70098695267d023c","title":"程序经过Javac.exe命令后，会生成一个或多个字节码文件(.class结尾)"},{"parent":"b65a322109ae83ef","children":[],"id":"83ea63be2c5aa59d","title":"接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件"},{"parent":"b65a322109ae83ef","children":[],"id":"f713cb0d3092fb22","title":"加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此     * 运行时类，就作为Class的一个实例"}],"id":"b65a322109ae83ef","title":"&nbsp;关于java.lang.Class类的理解<br>"},{"parent":"root","children":[],"id":"8559f11a2d614b2f","title":"换句话说，Class的实例就对应着一个运行时类类的加载过程"},{"parent":"root","children":[],"id":"ce1b0341ea936dac","title":"加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类<br>"}],"root":true,"theme":"theme3","id":"root","title":"反射与动态代理","structure":"mind_right"}},"meta":{"exportTime":"2021-07-25 16:54:20","member":"60ef8a5cf346fb06e6a9d554","diagramInfo":{"creator":"60ef8a5cf346fb06e6a9d554","created":"2021-07-24 22:43:37","modified":"2021-07-24 22:55:26","title":"反射与动态代理","category":"outline"},"id":"60fc2719f346fb1b4f5f6281","type":"ProcessOn Schema File","version":"1.0"}}